[
'UML_element -> $Class, $Property
$XML_element = $NamespacePrefix & "element"

write $Indent & "<" & $XML_element

' XML attributes
$Name = $Class.name
$IsFixedDefault = false

write " name=" & "\"" & $Name & "\""

foreach $Stereotype in $Class.appliedStereotype
	switch( $Stereotype.name )
		case "element":
			foreach $TaggedValue in $Stereotype.taggedValue
				$ValueName = $TaggedValue.name
				if( $ValueName = "fixed" )
					$Value = $TaggedValue.value
					if( $Value = "true" )
						$IsFixedDefault = true
					endif
				else
					$Prefix = " " & $ValueName & "=" & "\""
					$Postfix = ""
					foreach $SingleValue in $TaggedValue.values
						$Value = $SingleValue.value
						if( $Value <> "" )
							write $Prefix & $Value
							$Prefix = " "
							$Postfix =  "\""
						endif
					next
					write $Postfix
				endif
			next	
	endswitch		
next

if $Class.isAbstract : write " abstract=\"true\"" 	: endif

$Type = $Property.type
$HasType = $Type.Valid
$HasContentType = true
$HasSimpleType = false
$HasComplexTypeSimpleContent = false

if( $HasType )
	foreach $Type_Stereotype in $Type.appliedStereotype
		switch ($Type_Stereotype.name)
			case "global": 		$HasContentType = false
			case "simpleType": 	$HasSimpleType = true
			case "simpleContent": 	$HasComplexTypeSimpleContent = true
		endswitch
	next
endif

if( $HasType and $HasContentType = false )
	write " type=" & "\""
	call Type( $Type )
	write "\""
endif

$Default = $Property.defaultValue.value
if( $Default <> "" )
	if( $IsFixedDefault )
		write " fixed=" & "\"" & $Default & "\""		
	else
		write " default=" & "\"" & $Default & "\""		
	endif
endif

foreach $Generalization in $Class.generalization
	foreach $Stereotype_Generalization in $Generalization.appliedStereotype
		if( $Stereotype_Generalization.name = "substitution" )
			write " substitutionGroup=" & "\""
			call Reference( $Generalization.general )
			write "\""		
		endif		
	next
next

' end of XML attributes
write ">\n"

' content
$IndentSave = $Indent
$Indent = $Indent & $IndentStep

call Annotation( $Class )

if( $HasType and $HasContentType )
	if( $HasSimpleType )
		call SimpleType( $Type )
	else
		if( $HasComplexTypeSimpleContent )
			call ComplexType_SimpleContent( $Type )
		else
			call ComplexType( $Type )
		endif
	endif
endif

' end of content
$Indent = $IndentSave

write $Indent & "</" & $XML_element & ">\n"
]